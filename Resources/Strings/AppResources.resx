<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>

	<!-- Buradan sonrası senin ekleyeceğin stringler -->
	<data name="WelcomeText" xml:space="preserve">	
	    <value>Spy Game</value>
	</data>

	<data name="lblPlayersText" xml:space="preserve">	
	    <value>Players</value>
	</data>

	<data name="lblSpiesText" xml:space="preserve">	
	    <value>Spies</value>
	</data>

	<data name="lblTimeText" xml:space="preserve">	
	    <value>Time</value>
	</data>

	<data name="lblSectionsText" xml:space="preserve">	
	    <value>Sections</value>
	</data>

	<data name="btnPlayText" xml:space="preserve">	
	    <value>PLAY</value>
	</data>

	<data name="lblCountriesText" xml:space="preserve">	
	    <value>Countries</value>
	</data>

	<data name="lblObjectsText" xml:space="preserve">	
	    <value>Objects</value>
	</data>

	<data name="lblSportsText" xml:space="preserve">	
	    <value>Sports</value>
	</data>

	<data name="lblPlacesText" xml:space="preserve">	
	    <value>Places</value>
	</data>

	<data name="lblAnimalsText" xml:space="preserve">	
	    <value>Animals</value>
	</data>

	<data name="lblTransportText" xml:space="preserve">	
	    <value>Transport</value>
	</data>

	<data name="btnConfirmText" xml:space="preserve">	
	    <value>Confirm</value>
	</data>

	<data name="lblPlayerNamesText" xml:space="preserve">	
	    <value>Player Names</value>
	</data>

	<data name="btnClearPlayerNamesText" xml:space="preserve">	
	    <value>Clear Player Names</value>
	</data>

	<data name="PlayerLabel" xml:space="preserve">	
	    <value>Player</value>
	</data>

	<data name="lblOtherSpiesText" xml:space="preserve">	
	    <value>Other Spies</value>
	</data>

	<data name="lblTimeLeftText" xml:space="preserve">	
	    <value>Time Left</value>
	</data>

	<data name="btnShowSpiesText" xml:space="preserve">	
	    <value>SHOW SPIES</value>
	</data>

	<data name="lblGameOverText" xml:space="preserve">	
	    <value>GAME OVER!</value>
	</data>

	<data name="lblTheWordWasText" xml:space="preserve">	
	    <value>The Word Was</value>
	</data>

	<data name="btnNewGameText" xml:space="preserve">	
	    <value>NEW GAME</value>
	</data>

	<data name="lblGameSettingsText" xml:space="preserve">	
	    <value>Game Settings</value>
	</data>

	<data name="lblSelectGameLanguageText" xml:space="preserve">	
	    <value>Select Game Language</value>
	</data>

	<data name="btnSelectLanguageText" xml:space="preserve">	
	    <value>🌐 Select Language</value>
	</data>

	<data name="lblShowOtherSpiesModeText" xml:space="preserve">	
	    <value>Show Other Spies Mode</value>
	</data>

	<data name="btnApplyText" xml:space="preserve">	
	    <value>✔ APPLY</value>
	</data>

	<data name="btnDoneText" xml:space="preserve">	
	    <value>🚀 DONE</value>
	</data>

	<data name="lblPage1Paragrapgh1Text" xml:space="preserve">	
	    <value>Welcome to Spy Game, the board game you can enjoy anywhere, anytime. All you need is a group of friends and the right mood to dive in. To begin, you’ll first choose a theme. Each theme comes with its own set of words and a unique design, giving your game a fresh atmosphere and making every round feel exciting and different.E</value>
	</data>

	<data name="lblPage1Paragrapgh2Text" xml:space="preserve">	
	    <value>In Spy Game, there are two roles: AGENT and SPY. The Agents’ mission is to uncover who the Spy is, while the Spy’s goal is to avoid being discovered and escape elimination. It’s a battle of deduction, bluffing, and quick thinking, where every round brings new tension and fun.</value>
	</data>

	<data name="lblPage1Paragrapgh3Text" xml:space="preserve">	
	    <value>When the game starts, all Agents receive the same secret word. After reading it, they must memorize and keep it hidden. The Spy, however, gets no word at all. Their challenge is to act as if they know the word, blending in with the Agents without giving away their lack of knowledge.</value>
	</data>

	<data name="lblPage2Paragrapgh1Text" xml:space="preserve">	
	    <value>Once everyone knows their role, the interrogation phase begins. Players first decide on how long this round will last—either by setting a time limit or agreeing on a fixed number of questions. Then, one by one, they ask and answer questions that hint at the secret word. The Agents should pay close attention, looking for slips or odd answers that might expose the Spy hiding among them.</value>
	</data>

	<data name="lblPage2Paragrapgh2Text" xml:space="preserve">	
	    <value>When the questioning is over, it’s time to vote. Each player chooses the person they suspect is the Spy. If the group accuses an Agent by mistake, that Agent is eliminated and the game moves to the next round. But if the Spy is successfully identified, the Agents win the game instantly. The Spy’s only path to victory is surviving every vote without being caught.</value>
	</data>

</root>